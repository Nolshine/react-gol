{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["GameGrid","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","timer","gridHeight","gridWidth","state","running","grid","point","neighbours","y","x","neighbour","nextGrid","assign","neighbourCount","checkNeighbours","setState","e","target","id","split","_this2","clearInterval","setInterval","tick","_this3","react_default","a","createElement","className","key","onClick","handleClick","rowNumber","cells","i","push","renderCell","_this4","table","renderRow","handleStart","React","Component","App","App_GameGrid","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c708eb87.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\nclass GameGrid extends React.Component {\r\n  gridHeight;\r\n  gridWidth;\r\n  timer = null;\r\n\r\n  constructor (props) {\r\n    super(props);\r\n    this.gridHeight = 40;\r\n    this.gridWidth = 40;\r\n\r\n    this.state = {\r\n      running: false,\r\n      grid: {},\r\n    }\r\n  }\r\n\r\n  checkNeighbours (point) {\r\n    let neighbours = 0;\r\n    for (let y = -1; y < 2; y++){\r\n      for (let x = -1; x < 2; x++){\r\n        if(x === 0 && y === 0){\r\n          continue;\r\n        }\r\n        let neighbour = [point[0]+x, point[1]+y];\r\n        if (this.state.grid[neighbour]) {\r\n          neighbours += 1;\r\n        }\r\n      }\r\n    }\r\n    return neighbours;\r\n  }\r\n\r\n  tick() {\r\n    let nextGrid = {};\r\n    Object.assign(nextGrid, this.state.grid);\r\n\r\n    for (let y = 0; y < this.gridHeight; y++){\r\n      // for every row...\r\n      for (let x = 0; x < this.gridWidth; x++){\r\n        // for every column...\r\n        // check neighbour count at [col, row]\r\n        let neighbourCount = this.checkNeighbours([x, y]);\r\n\r\n        if (this.state.grid[[x, y]]){\r\n          if (neighbourCount < 2 || neighbourCount > 3){\r\n            delete nextGrid[[x, y]];\r\n          }\r\n        } else {\r\n          if (neighbourCount === 3){\r\n            nextGrid[[x, y]] = true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    this.setState({grid: nextGrid});\r\n  }\r\n\r\n  handleClick (e) {\r\n    let id = e.target.id;\r\n    let point = id.split(',');\r\n    // check if cell exists\r\n    if (this.state.grid[point]){\r\n      // if it does, get rid of it\r\n      let grid = this.state.grid;\r\n      delete grid[point];\r\n      this.setState({grid: grid});\r\n    } else {\r\n      // if it doesn't, make it live!\r\n      let grid = this.state.grid;\r\n      grid[point] = true;\r\n      this.setState({grid: grid});\r\n    }\r\n  }\r\n\r\n  handleStart() {\r\n    if(!this.state.running) {\r\n      this.timer = setInterval(() => this.tick(), 250);\r\n    } else {\r\n      clearInterval(this.timer);\r\n    }\r\n    this.setState({running: !this.state.running});\r\n  }\r\n\r\n  renderCell (point) {\r\n    if (this.state.grid[point]) {\r\n      return (<td\r\n        className=\"cell alive\"\r\n        key={point}\r\n        id={point}\r\n        onClick={(e) => {this.handleClick(e);}}\r\n        ></td>);\r\n    } else {\r\n      return (<td\r\n        className=\"cell\"\r\n        key={point}\r\n        id={point}\r\n        onClick={(e) => {this.handleClick(e);}}\r\n        ></td>);\r\n    }\r\n  }\r\n\r\n  renderRow (rowNumber) {\r\n    let cells = [];\r\n    for (let i = 0; i < this.gridWidth; i++) {\r\n      cells.push(this.renderCell([i, rowNumber]));\r\n    }\r\n\r\n    return (<tr key={rowNumber}>{cells}</tr>);\r\n  }\r\n\r\n  render () {\r\n    let table = [];\r\n    for (let i = 0; i < this.gridHeight; i++) {\r\n      table.push(this.renderRow(i));\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <table>\r\n          <tbody>{table}</tbody>\r\n        </table>\r\n        <button\r\n          onClick={() => this.handleStart()}\r\n          >{!this.state.running ? 'Start' : 'Stop'}</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <GameGrid className=\"game-grid\" />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}